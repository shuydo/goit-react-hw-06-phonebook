{"version":3,"sources":["Comps/ContactForm/ContactForm.js","Comps/ContactList/ContactList.js","Comps/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","e","preventDefault","type","pattern","title","required","value","onChange","target","ContactList","dBase","onDeleteContact","map","el","onClick","id","Filter","App","contacts","setContacts","filter","setFilter","useEffect","isContacts","JSON","parse","localStorage","getItem","setItem","stringify","data","includes","alert","oldS","nanoid","filterLowerC","toLowerCase","contact","getFilterContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAGe,SAASA,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACpC,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KAYA,OACE,uBAAML,SARa,SAAAM,GACnBA,EAAEC,iBACFP,EAAS,CAAEE,OAAME,WACjBD,EAAQ,IACRE,EAAU,KAIV,UACE,sCACA,uBACEG,KAAK,OACLN,KAAK,OACLO,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,MAAOV,EACPW,SApBmB,SAAAP,GAAC,OAAIH,EAAQG,EAAEQ,OAAOF,UAuB3C,wCACA,uBACEJ,KAAK,MACLN,KAAK,SACLO,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,MAAOR,EACPS,SA9BqB,SAAAP,GAAC,OAAID,EAAUC,EAAEQ,OAAOF,UAgC/C,uBACA,wBAAQJ,KAAK,SAAb,4BCvCS,SAASO,EAAT,GAAkD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBAC3C,OACE,6BACGD,EAAME,KAAI,SAACC,GAAD,OACT,6BACE,8BACE,iCACGA,EAAGjB,KADN,KACciB,EAAGf,OAAS,cAE1B,wBAAQI,KAAK,SAASY,QAAS,kBAAMH,EAAgBE,EAAGE,KAAxD,wBALKF,EAAGE,SCJL,SAASC,EAAT,GAAsC,IAApBV,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtC,OACE,qCACE,uDACA,uBAAOL,KAAK,OAAOI,MAAOA,EAAOC,SAAUA,OCQlC,SAASU,IAGtB,MAAgCtB,mBAAS,IAAzC,mBAAOuB,EAAP,KAAiBC,EAAjB,KACA,EAA4BxB,mBAAS,IAArC,mBAAOyB,EAAP,KAAeC,EAAf,KAiCA,OAZAC,qBAAU,WAER,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,aAC/CJ,GAAYJ,EAAYI,KAC3B,IAEHD,qBAEE,kBAAMI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUX,MACtD,CAACA,IAID,qCACE,2CACA,cAACzB,EAAD,CAAaC,SAlCG,SAAAoC,GACdZ,EAASN,KAAI,SAAAC,GAAE,OAAIA,EAAGjB,QAAMmC,SAASD,EAAKlC,MAC5CoC,MAAM,GAAD,OAAIF,EAAKlC,KAAT,6BACFuB,GAAY,SAAAc,GAAI,4BAAQA,GAAR,cAAgBlB,GAAImB,YAAO,KAAQJ,WAgCtD,0CACA,cAACd,EAAD,CAAQV,MAAOc,EAAQb,SA9BN,SAAAP,GAAC,OAAIqB,EAAUrB,EAAEQ,OAAOF,UA+BzC,cAACG,EAAD,CACEC,MA9BoB,WACxB,IAAMyB,EAAef,EAAOgB,cAE5B,OAAOlB,EAASE,QAAO,SAAAiB,GAAO,OAC5BA,EAAQzC,KAAKwC,cAAcL,SAASI,MA0B3BG,GACP3B,gBAvBgB,SAAA4B,GAAS,OAC7BpB,EAAYD,EAASE,QAAO,SAAAiB,GAAO,OAAIA,EAAQtB,KAAOwB,YC/B1DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEF0B,SAASC,eAAe,W","file":"static/js/main.4ff24486.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState();\n  const [number, setNumber] = useState();\n\n  const handleChangeName = e => setName(e.target.value);\n  const handleChangeNumber = e => setNumber(e.target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Name</h3>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={name}\n        onChange={handleChangeName}\n      />\n\n      <h3>Number</h3>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        value={number}\n        onChange={handleChangeNumber}\n      />\n      <br></br>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function ContactList({ dBase, onDeleteContact }) {\n  return (\n    <ol>\n      {dBase.map((el) => (\n        <li key={el.id}>\n          <p>\n            <span>\n              {el.name}: {el.number + \"  \"}\n            </span>\n            <button type=\"button\" onClick={() => onDeleteContact(el.id)}>\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nContactList.propTypes = {\n  dBase: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input type=\"text\" value={value} onChange={onChange}></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from \"react\"; // import { v4 as uuid } from \"uuid\";\nimport { nanoid } from \"nanoid\";\n\nimport ContactForm from \"./Comps/ContactForm/ContactForm\";\nimport ContactList from \"./Comps/ContactList/ContactList\";\nimport Filter from \"./Comps/Filter/Filter\";\n\n// const defContacts = [\n//   { id: \"id-1\", name: \"Rousie Simpson\", number: \"459-12-56\" },\n//   { id: \"id-2\", name: \"Hermeone Kline\", number: \"443-89-12\" },\n//   { id: \"id-3\", name: \"Eaden Clements\", number: \"645-17-79\" },\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n// ];\n\nexport default function App() {\n  // const [contacts, setContacts] = useState(defContacts);\n\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  const appendDBase = data => {\n    if (contacts.map(el => el.name).includes(data.name))\n      alert(`${data.name} is already in contacts.`);\n    else setContacts(oldS => [...oldS, { id: nanoid(10), ...data }]);\n  };\n\n  const changeFilter = e => setFilter(e.target.value);\n\n  const getFilterContacts = () => {\n    const filterLowerC = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterLowerC)\n    );\n  };\n\n  const deleteContact = contactId =>\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n\n  useEffect(() => {\n    // console.log(\"1st & единажды \" + Date.now());\n    const isContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (isContacts) setContacts(isContacts);\n  }, []);\n\n  useEffect(\n    // console.log(\"типа componentDidUpdate \" + Date.now());\n    () => localStorage.setItem(\"contacts\", JSON.stringify(contacts)),\n    [contacts]\n  );\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={appendDBase} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList\n        dBase={getFilterContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals' Shu;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals() Shu;\n"],"sourceRoot":""}