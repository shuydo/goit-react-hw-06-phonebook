{"version":3,"sources":["redux/contacts-types.js","redux/contacts-reducer.js","redux/store.js","redux/contacts-actions.js","Comps/ContactForm/ContactForm.js","Comps/ContactList/ContactList.js","Comps/Filter/Filter.js","App.js","index.js"],"names":["types","ADD","DEL","FILTERchange","combineReducers","items","state","type","payload","filter","id","rootReducer","contacts","contactsReducer","store","createStore","composeWithDevTools","contactsAction","addContact","name","number","nanoid","deleteContact","contactId","changeFilter","value","connect","dispatch","onSubmit","contactsActions","useState","setName","setNumber","e","preventDefault","pattern","title","required","onChange","target","getFilterContacts","filterLowerC","toLowerCase","includes","dBase","onDeleteContact","map","el","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5e87410.chunk.js","sourcesContent":["const ADD = \"contacts/add\";\r\nconst DEL = \"contacts/delete\";\r\nconst FILTERchange = \"contacts/changeFilter\";\r\n\r\nconst types = { ADD, DEL, FILTERchange };\r\nexport default types;\r\n\r\n// export default {\r\n//   ADD: \"contacts/add\",\r\n//   DEL: \"contacts/delete\",\r\n//   FILTERchange: \"contacts/changeFilter\",\r\n// };\r\n","import { combineReducers } from \"redux\";\r\nimport types from \"./contacts-types\";\r\n\r\nconst items = (state = [], { type, payload }) => {\r\n  \r\n  switch (type) {\r\n    case types.ADD:\r\n      // if (\r\n      //   state.some(\r\n      //     ({ name }) => name.toLowerCase() === payload.name.toLowerCase(),\r\n      //   )\r\n      // ) {\r\n      //   alert(`${payload.name} is already in contacts`);\r\n      //   return [...state];\r\n      // }\r\n      // if (state.some(({ number }) => number === payload.number)) {\r\n      //   alert(`${payload.number} is already in contacts`);\r\n      //   return [...state];\r\n      // }\r\n      return [...state, payload];\r\n\r\n    case types.DEL:\r\n      return state.filter(({ id }) => id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (state = \"\", { type, payload }) => {\r\n  switch (type) {\r\n    case types.FILTERchange:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport contactsReducer from \"./contacts-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import { nanoid } from \"nanoid\";\r\n\r\nimport types from \"./contacts-types\";\r\n\r\nconst addContact = (name, number) => ({\r\n  type: types.ADD,\r\n  payload: { name, number, id: nanoid(10) },\r\n});\r\n\r\nconst deleteContact = contactId => ({\r\n  type: types.DEL,\r\n  payload: contactId,\r\n});\r\n\r\nconst changeFilter = value => ({\r\n  type: types.FILTERchange,\r\n  payload: value,\r\n});\r\n\r\nconst contactsAction = { addContact, deleteContact, changeFilter };\r\nexport default contactsAction;\r\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect /*, useDispatch*/ } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts-actions\";\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState();\n  const [number, setNumber] = useState();\n\n  // const dispatch=useDispatch()\n\n  const handleChangeName = e => setName(e.target.value);\n  const handleChangeNumber = e => setNumber(e.target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit({ name, number });\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Name</h3>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={name}\n        onChange={handleChangeName}\n      />\n\n      <h3>Number</h3>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        value={number}\n        onChange={handleChangeNumber}\n      />\n      <br></br>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapsDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsActions.addContact(name, number)),\n});\n\nexport default connect(null, mapsDispatchToProps)(ContactForm);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts-actions\";\n\nfunction ContactList({ dBase, onDeleteContact }) {\n  return (\n    <ol>\n      {dBase.map(el => (\n        <li key={el.id}>\n          <p>\n            <span>\n              {el.name}: {el.number + \"  \"}\n            </span>\n            <button type=\"button\" onClick={() => onDeleteContact(el.id)}>\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nContactList.propTypes = {\n  dBase: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst getFilterContacts = (contacts, filter) => {\n  const filterLowerC = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filterLowerC)\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  dBase: getFilterContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport contactsActions from \"../../redux/contacts-actions\";\n\nfunction Filter({ value, onChange }) {\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input type=\"text\" value={value} onChange={onChange}></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from \"./Comps/ContactForm/ContactForm\";\nimport ContactList from \"./Comps/ContactList/ContactList\";\nimport Filter from \"./Comps/Filter/Filter\";\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}